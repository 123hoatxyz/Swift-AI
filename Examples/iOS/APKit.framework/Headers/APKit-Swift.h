// Generated by Apple Swift version 2.1 (swiftlang-700.1.101.6 clang-700.1.76)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class NSCoder;


/// A subclass of UIView that provides the ability to add two optional borders. One to the top, one to the bottom, or both.
///
/// :param: border The position of the border(s)
/// :param: color The color of the border(s)
SWIFT_CLASS("_TtC5APKit12APBorderView")
@interface APBorderView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (void)hideBorders;
- (void)showBorders;
@end


SWIFT_CLASS("_TtC5APKit12APConstraint")
@interface APConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC5APKit11APEmptyView")
@interface APEmptyView : UIView
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class APStackView;

SWIFT_CLASS("_TtC5APKit10APGridView")
@interface APGridView : UIView

/// The top-level master stackView containing each of the horizontalStackViews.
@property (nonatomic, strong) APStackView * __nonnull verticalStackView;

/// The horizontal-axis stackViews containing each of the views in the grid.
@property (nonatomic, copy) NSArray<APStackView *> * __nonnull horizontalStackViews;
@property (nonatomic, readonly, copy) NSArray<UIView *> * __nonnull arrangedSubviews;

/// The spacing between each view in the grid.
@property (nonatomic) CGFloat spacing;

/// The edge insets for the grid view (default zero). Specify positive values for insets; negative values may be used to acheive 'outsets.'
@property (nonatomic) UIEdgeInsets edgeInsets;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (void)reloadData;
- (void)removeCellAtPositionWithRow:(NSInteger)row column:(NSInteger)column;
- (void)hideCellAtPositionWithRow:(NSInteger)row column:(NSInteger)column;
- (void)removeRow:(NSInteger)row;
- (void)hideRow:(NSInteger)row;
- (void)unhideRow:(NSInteger)row;
- (void)insertRowAtIndex:(NSInteger)index;
@end


SWIFT_CLASS("_TtC5APKit17APLabelWithInsets")
@interface APLabelWithInsets : UILabel
- (nonnull instancetype)initWithInsets:(UIEdgeInsets)insets;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawTextInRect:(CGRect)rect;
@end

@class APMultiSegmentedControlSegment;
@class UIColor;

SWIFT_CLASS("_TtC5APKit23APMultiSegmentedControl")
@interface APMultiSegmentedControl : UIView
@property (nonatomic, copy) NSArray<APMultiSegmentedControlSegment *> * __nonnull segments;
@property (nonatomic, readonly, strong) UIView * __nonnull segmentContainerView;
- (nonnull instancetype)initWithSegementTitles:(NSArray<NSString *> * __nonnull)segmentTitles normalBackgroundColor:(UIColor * __nonnull)normal selectedBackgroundColor:(UIColor * __nonnull)selected highlightedBackgroundColor:(UIColor * __nonnull)highlighted;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)updateConstraints;
- (void)selectSegmentsAtIndexes:(NSArray<NSNumber *> * __nonnull)indexes;
- (void)deselectAllSegments;
- (NSArray<NSNumber *> * __nonnull)selectedSegments;
@end


SWIFT_CLASS("_TtC5APKit30APMultiSegmentedControlSegment")
@interface APMultiSegmentedControlSegment : UIButton
- (nonnull instancetype)initWithTitle:(NSString * __nonnull)title normalBackgroundColor:(UIColor * __nonnull)normalBackgroundColor selectedBackgroundColor:(UIColor * __nonnull)selectedBackgroundColor highlightedBackgroundColor:(UIColor * __nonnull)highlightedBackgroundColor first:(BOOL)first last:(BOOL)last;
- (void)layoutSubviews;
- (void)segmentTapped;
- (void)overrideTouchDown;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



/// A subclass of UILabel that automatically wraps text to width of its own frame. May be used with AutoLayout without providing a preferredMaxLayoutWidth. IMPORTANT: Do not assign a height constraint to APMultiLineLabels
SWIFT_CLASS("_TtC5APKit16APMultilineLabel")
@interface APMultilineLabel : UILabel
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end

@class UITouch;
@class UIEvent;


/// A UIButton subclass that renders a springy animation when tapped. If the damping parameters are set to 1.0, this class may be used to provide subtle feedback to buttons with no elsasticity.
///
/// \param minimumScale The minimum scale that the button may reach while pressed. Default 0.95
///
/// \param pressSpringDamping The damping parameter for the spring animation used when the button is pressed. Default 0.4
///
/// \param releaseSpringDamping The damping parameter for the spring animation used when the button is released. Default 0.35
///
/// \param pressSpringDuration The duration of the spring animation used when the button is pressed. Default 0.4
///
/// \param releaseSpringDuration The duration of the spring animation used when the button is reloeased. Default 0.5
SWIFT_CLASS("_TtC5APKit14APSpringButton")
@interface APSpringButton : UIButton
@property (nonatomic) CGFloat minimumScale;
@property (nonatomic) CGFloat pressSpringDamping;
@property (nonatomic) CGFloat releaseSpringDamping;
@property (nonatomic) double pressSpringDuration;
@property (nonatomic) double releaseSpringDuration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * __nonnull)touches withEvent:(UIEvent * __nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * __nullable)touches withEvent:(UIEvent * __nullable)event;
@end

@protocol APStackViewReorderDelegate;
@class UIGestureRecognizer;


/// This class is a drop-in replacement for UIStackView (introduced with iOS 9), providing support for earlier operating systems. When the client's device is running iOS 9+, Apple's native UIStackView implementation will be used. Otherwise, an instance of TZStackView (courtesy of Tom van Zummeren) will be used. All class members and methods are identical to the native UIStackView.
SWIFT_CLASS("_TtC5APKit11APStackView")
@interface APStackView : UIView <UIGestureRecognizerDelegate>
@property (nonatomic) BOOL isNative;
@property (nonatomic) UILayoutConstraintAxis axis;
@property (nonatomic) CGFloat spacing;
@property (nonatomic) BOOL layoutMarginsRelativeArrangement;
@property (nonatomic, readonly, copy) NSArray<UIView *> * __nonnull arrangedSubviews;
- (nonnull instancetype)initWithArrangedSubviews:(NSArray<UIView *> * __nonnull)arrangedSubviews OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)addArrangedSubview:(UIView * __nonnull)view;
- (void)addArrangedSubviews:(NSArray<UIView *> * __nonnull)views;
- (void)insertArrangedSubview:(UIView * __nonnull)view atIndex:(NSInteger)stackIndex;
- (void)removeArrangedSubview:(UIView * __nonnull)view;
- (void)removeArrangedSubviewAtIndex:(NSInteger)index;
- (void)willRemoveSubview:(UIView * __nonnull)subview;
- (void)updateConstraints;
- (void)observeValueForKeyPath:(NSString * __nullable)keyPath ofObject:(id __nullable)object change:(NSDictionary<NSString *, id> * __nullable)change context:(void * __null_unspecified)context;

/// Setting reorderdingEnabled to true enables a drag to reorder behavior like UITableView
@property (nonatomic) BOOL reorderingEnabled;
@property (nonatomic, strong) id <APStackViewReorderDelegate> __nullable reorderDelegate;

/// The gap created once the long press drag is triggered
@property (nonatomic) BOOL clipsToBoundsWhileReordering;
@property (nonatomic) CGFloat cornerRadii;
@property (nonatomic) CGFloat temporaryViewScale;
@property (nonatomic) CGFloat otherViewsScale;
@property (nonatomic) CGFloat temporaryViewAlpha;
@property (nonatomic) CGFloat dragHintSpacing;
@property (nonatomic) double longPressMinimumPressDuration;
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * __nonnull)gestureRecognizer;
@end


SWIFT_PROTOCOL("_TtP5APKit26APStackViewReorderDelegate_")
@protocol APStackViewReorderDelegate
@optional

/// didBeginReordering - called when reordering begins
- (void)didBeginReordering;

/// Whenever a user drags a subview for a reordering, the delegate is told whether the direction was up or down, as well as what the max and min Y values are of the subview
- (void)didDragToReorderInUpDirection:(BOOL)up maxY:(CGFloat)maxY minY:(CGFloat)minY;

/// didReorder - called whenever a subview was reordered (returns the new index) didEndReordering = called when reordering ends
- (void)didEndReordering;
@end


SWIFT_CLASS("_TtC5APKit24APTextFieldWithLeftInset")
@interface APTextFieldWithLeftInset : UITextField
- (nonnull instancetype)initWithInset:(NSInteger)inset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGRect)textRectForBounds:(CGRect)bounds;
- (CGRect)editingRectForBounds:(CGRect)bounds;
@end


@interface NSData (SWIFT_EXTENSION(APKit))

/// Returns the hexadecimal string representation of the receiver's bytes
- (NSString * __nonnull)toHex;
@end


SWIFT_CLASS("_TtC5APKit12TZSpacerView")
@interface TZSpacerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

enum TZStackViewDistribution : NSInteger;
enum TZStackViewAlignment : NSInteger;

SWIFT_CLASS("_TtC5APKit11TZStackView")
@interface TZStackView : UIView
@property (nonatomic) enum TZStackViewDistribution distribution;
@property (nonatomic) UILayoutConstraintAxis axis;
@property (nonatomic) enum TZStackViewAlignment alignment;
@property (nonatomic) CGFloat spacing;
@property (nonatomic) BOOL layoutMarginsRelativeArrangement;
@property (nonatomic, readonly, copy) NSArray<UIView *> * __nonnull arrangedSubviews;
- (nonnull instancetype)initWithArrangedSubviews:(NSArray<UIView *> * __nonnull)arrangedSubviews OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * __nullable)keyPath ofObject:(id __nullable)object change:(NSDictionary<NSString *, id> * __nullable)change context:(void * __null_unspecified)context;
- (void)addArrangedSubview:(UIView * __nonnull)view;
- (void)removeArrangedSubview:(UIView * __nonnull)view;
- (void)insertArrangedSubview:(UIView * __nonnull)view atIndex:(NSInteger)stackIndex;
- (void)willRemoveSubview:(UIView * __nonnull)subview;
- (void)updateConstraints;
- (nonnull instancetype)initWithCoder:(NSCoder * __nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, TZStackViewAlignment) {
  TZStackViewAlignmentFill = 0,
  TZStackViewAlignmentCenter = 1,
  TZStackViewAlignmentLeading = 2,
  TZStackViewAlignmentTop = 3,
  TZStackViewAlignmentTrailing = 4,
  TZStackViewAlignmentBottom = 5,
  TZStackViewAlignmentFirstBaseline = 6,
};

typedef SWIFT_ENUM(NSInteger, TZStackViewDistribution) {
  TZStackViewDistributionFill = 0,
  TZStackViewDistributionFillEqually = 1,
  TZStackViewDistributionFillProportionally = 2,
  TZStackViewDistributionEqualSpacing = 3,
  TZStackViewDistributionEqualCentering = 4,
};


@interface UIButton (SWIFT_EXTENSION(APKit))

/// Remember to give the button a height constraint
- (void)setBackgroundColor:(UIColor * __nonnull)color forUIControlState:(UIControlState)state;
@end


@interface UIColor (SWIFT_EXTENSION(APKit))
+ (UIColor * __nonnull)black;
+ (UIColor * __nonnull)blue;
+ (UIColor * __nonnull)clear;
+ (UIColor * __nonnull)darkGray;
+ (UIColor * __nonnull)darkText;
+ (UIColor * __nonnull)green;
+ (UIColor * __nonnull)lightGray;
+ (UIColor * __nonnull)magenta;
+ (UIColor * __nonnull)orange;
+ (UIColor * __nonnull)purple;
+ (UIColor * __nonnull)red;
+ (UIColor * __nonnull)white;
+ (UIColor * __nonnull)yellow;
@end


@interface UIDevice (SWIFT_EXTENSION(APKit))
@end


@interface UILabel (SWIFT_EXTENSION(APKit))
- (CGSize)labelSizeWithWidthOfContainingView:(CGFloat)widthOfContainingView;
@end


@interface UIView (SWIFT_EXTENSION(APKit))

/// Adds multiple subviews to the receiver, in the order specified in the array
- (void)addSubviews:(NSArray<UIView *> * __nonnull)subviews;
- (void)fillSuperview;
- (void)centerInSuperview;
- (void)removeAllConstraints;
- (void)spaceHorizontalWithInsetWithViews:(NSArray<UIView *> * __nonnull)views inset:(UIEdgeInsets)inset;
@end

@class UIDynamicAnimator;

@interface UIView (SWIFT_EXTENSION(APKit))

/// Available to the receiver in order to maintain a reference to a UIDynamicAnimator
@property (nonatomic, strong) UIDynamicAnimator * __nullable dynamicAnimator;

/// A quick horizontal shake, similar to the OS X failed login animation
- (void)shake;
- (void)bounce;

/// Adds perspective zoom to the receiver, similar to the iOS 7+ home screen.
///
/// \param relativeDistance The maximum distance the view may translate in any direction.
///
/// \param withShadow Flag indicating whether the receiver's shadow should also be animated. If TRUE and the receiver has not already been given a shadow, a default black shadow (radius 3, opacity 0.4) is assigned.
- (void)addPerspectiveWithRelativeDistance:(CGFloat)relativeDistance withShadow:(BOOL)withShadow;

/// Adds perspective zoom to the receiver, with a 3D rotation effect.
///
/// \param rotationAmount CGFloat between 0 and 1. Maximum amount of rotation allowed.
///
/// \param withShadow Flag indicating whether the receiver's shadow should also be animated. If TRUE and the receiver has not already been given a shadow, a default black shadow (radius 3, opacity 0.4) is assigned.
- (void)addPerspectiveWithRotationAmount:(CGFloat)rotationAmount withShadow:(BOOL)withShadow;

/// Calculates the transformation needed to transition the receiver from its current frame to the given bounds, and assigns it to the receiver.\Important 
///
/// This method does not work if applied to a view to which a non-identity transform has already been applied.
/// It currently works for transitioning between the identity transform, a new calculated transform, and back.
///
/// \param toRect The ending bounds for the transformation.
- (void)transformToRect:(CGRect)toRect;
- (void)transformToRect:(CGRect)toRect affectsSubviews:(BOOL)affectsSubviews;
@end

#pragma clang diagnostic pop
